$ terraform init

Initializing Terraform Cloud...

The local Terraform version (1.6.3-dev) is not available in Terraform Cloud, or your
organization does not have access to it. The new workspace will use 1.6.3. You can
change this later in the workspace settings.

Initializing provider plugins...
- Finding hashicorp/random versions matching "3.4.3"...
- Finding hashicorp/aws versions matching "4.52.0"...
- Installing hashicorp/random v3.4.3...
- Installed hashicorp/random v3.4.3 (signed by HashiCorp)
- Installing hashicorp/aws v4.52.0...
- Installed hashicorp/aws v4.52.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform Cloud has been successfully initialized!

You may now begin working with Terraform Cloud. Try running "terraform plan" to
see any changes that are required for your infrastructure.

If you ever set or change modules or Terraform Settings, run "terraform init"
again to reinitialize your working directory.


$ terraform plan
Running plan in Terraform Cloud. Output will stream here. Pressing Ctrl-C
will stop streaming the logs, but will not stop the plan running remotely.

Preparing the remote plan...

To view this run in a browser, visit:
https://app.terraform.io/app/Code-Mountains/gh-actions-demo/runs/run-wYFUJsh9qq9jG1z9

Waiting for the plan to start...

Terraform v1.6.3
on linux_amd64
Initializing plugins and modules...
data.aws_ami.ubuntu: Refreshing...
data.aws_ami.ubuntu: Refresh complete after 1s [id=ami-043375e2bdc1f1394]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with
the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.web will be created
  + resource "aws_instance" "web" {
      + ami                                  = "ami-043375e2bdc1f1394"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags_all                             = (known after apply)
      + tenancy                              = (known after apply)
      + user_data                            = "d36263b945850b1251dc22e4ed5c62aeb9e9e0f0"
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # aws_security_group.web-sg will be created
  + resource "aws_security_group" "web-sg" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 8080
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 8080
            },
        ]
      + name                   = (known after apply)
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # random_pet.sg will be created
  + resource "random_pet" "sg" {
      + id        = (known after apply)
      + length    = 2
      + separator = "-"
    }

Plan: 3 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + web-address = (known after apply)

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions
if you run "terraform apply" now.



$ terraform plan -out=plan-output.tfplan

$ terraform apply "plan-output.tfplan"

Running apply in Terraform Cloud. Output will stream here. Pressing Ctrl-C
will stop streaming the logs, but will not stop the apply running remotely.

Preparing the remote apply...

To view this run in a browser, visit:
https://app.terraform.io/app/Code-Mountains/gh-actions-demo/runs/run-KnLt4P6BCBaYBa9o

random_pet.sg: Creating...
random_pet.sg: Creation complete after 0s [id=proud-javelin]
aws_security_group.web-sg: Creating...
aws_security_group.web-sg: Creation complete after 2s [id=sg-0e077f7385f814ef2]
aws_instance.web: Creating...
aws_instance.web: Still creating... [10s elapsed]
aws_instance.web: Still creating... [20s elapsed]
aws_instance.web: Still creating... [30s elapsed]
aws_instance.web: Still creating... [40s elapsed]
aws_instance.web: Creation complete after 42s [id=i-09f7fdeaf49fbfa29]

Apply complete! Resources: 3 added, 0 changed, 0 destroyed.

Outputs:
web-address = "ec2-54-145-207-214.compute-1.amazonaws.com:8080"
╷
│ Error: Failed to read logs: unauthorized
│ 
│ Terraform Cloud returned an unexpected error. Sometimes this is caused by network connection problems, in which
│ case you could retry the command. If the issue persists please open a support ticket to get help resolving the
│ problem.
╵

$ terraform show
# data.aws_ami.ubuntu:
data "aws_ami" "ubuntu" {
    architecture          = "x86_64"
    arn                   = "arn:aws:ec2:us-east-1::image/ami-043375e2bdc1f1394"
    block_device_mappings = [
        {
            device_name  = "/dev/sda1"
            ebs          = {
                "delete_on_termination" = "true"
                "encrypted"             = "false"
                "iops"                  = "0"
                "snapshot_id"           = "snap-035e508ff3ed1dff0"
                "throughput"            = "0"
                "volume_size"           = "8"
                "volume_type"           = "gp2"
            }
            no_device    = ""
            virtual_name = ""
        },
        {
            device_name  = "/dev/sdb"
            ebs          = {}
            no_device    = ""
            virtual_name = "ephemeral0"
        },
        {
            device_name  = "/dev/sdc"
            ebs          = {}
            no_device    = ""
            virtual_name = "ephemeral1"
        },
    ]
    boot_mode             = "legacy-bios"
    creation_date         = "2023-11-01T08:18:21.000Z"
    deprecation_time      = "2025-11-01T08:18:21.000Z"
    description           = "Canonical, Ubuntu Minimal, 20.04 LTS, amd64 focal image build on 2023-11-01"
    ena_support           = true
    hypervisor            = "xen"
    id                    = "ami-043375e2bdc1f1394"
    image_id              = "ami-043375e2bdc1f1394"
    image_location        = "amazon/ubuntu-minimal/images/hvm-ssd/ubuntu-focal-20.04-amd64-minimal-20231101"
    image_owner_alias     = "amazon"
    image_type            = "machine"
    include_deprecated    = false
    most_recent           = true
    name                  = "ubuntu-minimal/images/hvm-ssd/ubuntu-focal-20.04-amd64-minimal-20231101"
    owner_id              = "099720109477"
    owners                = [
        "099720109477",
    ]
    platform_details      = "Linux/UNIX"
    product_codes         = []
    public                = true
    root_device_name      = "/dev/sda1"
    root_device_type      = "ebs"
    root_snapshot_id      = "snap-035e508ff3ed1dff0"
    sriov_net_support     = "simple"
    state                 = "available"
    state_reason          = {
        "code"    = "UNSET"
        "message" = "UNSET"
    }
    tags                  = {}
    usage_operation       = "RunInstances"
    virtualization_type   = "hvm"

    filter {
        name   = "name"
        values = [
            "ubuntu-minimal/images/hvm-ssd/ubuntu-focal-20.04-amd64-minimal*",
        ]
    }
    filter {
        name   = "virtualization-type"
        values = [
            "hvm",
        ]
    }
}

# aws_instance.web:
resource "aws_instance" "web" {
    ami                                  = "ami-043375e2bdc1f1394"
    arn                                  = "arn:aws:ec2:us-east-1:387458100021:instance/i-09f7fdeaf49fbfa29"
    associate_public_ip_address          = true
    availability_zone                    = "us-east-1c"
    cpu_core_count                       = 1
    cpu_threads_per_core                 = 1
    disable_api_stop                     = false
    disable_api_termination              = false
    ebs_optimized                        = false
    get_password_data                    = false
    hibernation                          = false
    id                                   = "i-09f7fdeaf49fbfa29"
    instance_initiated_shutdown_behavior = "stop"
    instance_state                       = "running"
    instance_type                        = "t2.micro"
    ipv6_address_count                   = 0
    ipv6_addresses                       = []
    monitoring                           = false
    placement_partition_number           = 0
    primary_network_interface_id         = "eni-07b85a94b0fad5f54"
    private_dns                          = "ip-172-31-19-218.ec2.internal"
    private_ip                           = "172.31.19.218"
    public_dns                           = "ec2-54-145-207-214.compute-1.amazonaws.com"
    public_ip                            = "54.145.207.214"
    secondary_private_ips                = []
    security_groups                      = [
        "proud-javelin-sg",
    ]
    source_dest_check                    = true
    subnet_id                            = "subnet-0e5fdea1690deab8c"
    tags_all                             = {}
    tenancy                              = "default"
    user_data                            = "d36263b945850b1251dc22e4ed5c62aeb9e9e0f0"
    user_data_replace_on_change          = false
    vpc_security_group_ids               = [
        "sg-0e077f7385f814ef2",
    ]

    capacity_reservation_specification {
        capacity_reservation_preference = "open"
    }

    credit_specification {
        cpu_credits = "standard"
    }

    enclave_options {
        enabled = false
    }

    maintenance_options {
        auto_recovery = "default"
    }

    metadata_options {
        http_endpoint               = "enabled"
        http_put_response_hop_limit = 1
        http_tokens                 = "optional"
        instance_metadata_tags      = "disabled"
    }

    private_dns_name_options {
        enable_resource_name_dns_a_record    = false
        enable_resource_name_dns_aaaa_record = false
        hostname_type                        = "ip-name"
    }

    root_block_device {
        delete_on_termination = true
        device_name           = "/dev/sda1"
        encrypted             = false
        iops                  = 100
        tags                  = {}
        throughput            = 0
        volume_id             = "vol-08207cbbc329a2b66"
        volume_size           = 8
        volume_type           = "gp2"
    }
}

# aws_security_group.web-sg:
resource "aws_security_group" "web-sg" {
    arn                    = "arn:aws:ec2:us-east-1:387458100021:security-group/sg-0e077f7385f814ef2"
    description            = "Managed by Terraform"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-0e077f7385f814ef2"
    ingress                = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 8080
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 8080
        },
    ]
    name                   = "proud-javelin-sg"
    owner_id               = "387458100021"
    revoke_rules_on_delete = false
    tags_all               = {}
    vpc_id                 = "vpc-0ce399f49fb18fcfb"
}

# random_pet.sg:
resource "random_pet" "sg" {
    id        = "proud-javelin"
    length    = 2
    separator = "-"
}


Outputs:

web-address = "ec2-54-145-207-214.compute-1.amazonaws.com:8080"
